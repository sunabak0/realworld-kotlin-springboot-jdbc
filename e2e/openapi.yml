#
# Original
# https://github.com/gothinkster/realworld/blob/main/api/openapi.yml
#

#
# OpenAPI Object: openapi
#
# 型
# - string
# 必須？
# - Yes
# URL
# - https://spec.openapis.org/oas/v3.0.1#openapi-object
#
openapi: 3.0.1

#
# OpenAPI Object: info
#
# 型
# - InfoObject
# 必須？
# - Yes
# URL
# - https://spec.openapis.org/oas/v3.0.1#openapi-object
# 概要
# - APIに関するメタデータ
# InfoObjectの詳細
# - https://spec.openapis.org/oas/v3.0.1#info-object
#
info:
  title: Conduit API
  description: Conduit API
  contact:
    name: RealWorld
    url: https://realworld.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

#
# OpenAPI Object: servers
#
# 型
# - [Server Object]
# 必須？
# - No
# URL
# - https://spec.openapis.org/oas/v3.0.1#openapi-object
# 概要
# - ターゲットサーバへの接続情報を提供するServer Objectの配列
# Server Objectの詳細
# - https://spec.openapis.org/oas/v3.0.1#server-object
#
servers:
  - url: /api

#
# OpenAPI Object: paths
#
# 型
# - Paths Object
# 必須？
# - Yes
# URL
# - https://spec.openapis.org/oas/v3.0.1#openapi-object
# 概要
# - 利用可能なパスと操作内容
# Paths Objectの詳細
# - https://spec.openapis.org/oas/v3.0.1#paths-object
#
paths:

  #
  # Paths Object
  #
  # 概要
  # - 1つのパスで利用可能な操作
  # - 空でもよい
  # - どんなURLがあるかの公開はされる
  /users/login:
    #
    # Paths Object: get/put/post/delete/options/head/patch/trace
    #
    post:

      #
      # Paths Object: tags
      #
      # 型
      # - [string]
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - APIドキュメントのグループ化・フィルタ等の制御のためのタグリスト
      #
      tags:
        - User and Authentication

      #
      # Paths Object: summary
      #
      # 型
      # - string
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - 操作の内容のサマリー
      #
      summary: Existing user login

      #
      # Paths Object: description
      #
      # 型
      # - string
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - 説明(CommonMark形式が使える)
      # - CommonMarkは、Markdownの仕様が決まってない人たちが作った軽量マークアップ言語
      #
      description: Login for existing user

      #
      # Paths Object: operationId
      #
      # 型
      # - string
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - 操作の識別子(ユニークな文字列)
      # - CommonMarkは、Markdownの仕様が決まってない人たちが作った軽量マークアップ言語
      #
      operationId: Login

      #
      # Paths Object: requestBody
      #
      # 型
      # - Request Body Object
      # - or Reference Object
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - 操作のリクエストボディ
      # - CommonMarkは、Markdownの仕様が決まってない人たちが作った軽量マークアップ言語
      # Request Body Objectの詳細
      # - https://spec.openapis.org/oas/v3.0.1#request-body-object
      # Reference Objectの詳細
      # - https://spec.openapis.org/oas/v3.0.1#reference-object
      # 見分け方
      # - Topのkeyに "content" があるとRequest Body Object
      # - Topのkeyに "$ref" があるとReference Object
      #
      requestBody:
        description: Credentials to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
        required: true

      #
      # Paths Object: responses
      #
      # 型
      # - Responses Object
      # 必須？
      # - Yes
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - この操作に返される可能性があるレスポンスのリスト
      # Responses Objectの詳細
      # - https://spec.openapis.org/oas/v3.0.1#responses-object
      #
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'

      #
      # Paths Object: x-codegen-request-body-name
      #
      # Referenceには無い
      # 値を変更してもSwagger UIには出てこない
      #
      # > この操作に x-codegen-request-body-name フィールドが定義されている場合、その値が入力の名前になります。 それ以外の場合、その名前は body になります。
      # 参考
      # - https://www.ibm.com/docs/ja/baw/20.x?topic=service-invoking-rest#taskd80585e327
      #
      x-codegen-request-body-name: body
  /users:
    post:
      tags:
        - User and Authentication
      summary: Register a new user
      description: Register a new user
      operationId: CreateUser
      requestBody:
        description: Details of the new user to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      x-codegen-request-body-name: body
  /user:
    get:
      tags:
        - User and Authentication
      summary: Get current user
      description: Gets the currently logged-in user
      operationId: GetCurrentUser
      #
      # Operation Object: parameters
      #
      # 型
      # - Parameter Object
      # - or Reference Object
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#operation-object
      # 概要
      # - パラメータのリスト
      # Parameter Objectの詳細
      # - https://spec.openapis.org/oas/v3.0.1#parameter-object
      #
      # 自前追加
      #
      parameters:
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
    put:
      tags:
        - User and Authentication
      summary: Update current user
      description: Updated user information for current user
      operationId: UpdateCurrentUser
      #
      # 自前追加(TODO: 共通化できたらしたい)
      #
      parameters:
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
      requestBody:
        description: User details to update. At least **one** field is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: body
  /profiles/{username}:
    get:
      tags:
        - Profile
      summary: Get a profile
      description: Get a profile of a user of the system. Auth is optional
      operationId: GetProfileByUsername
      parameters:
        - name: Authorization
          in: header
          description: セッション用JWT
          required: false
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: username
          in: path
          description: Username of the profile to get
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
  /profiles/{username}/follow:
    post:
      tags:
        - Profile
      summary: Follow a user
      description: Follow a user by username
      operationId: FollowUserByUsername
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: username
          in: path
          description: Username of the profile you want to follow
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
    delete:
      tags:
        - Profile
      summary: Unfollow a user
      description: Unfollow a user by username
      operationId: UnfollowUserByUsername
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: username
          in: path
          description: Username of the profile you want to unfollow
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
  /articles/feed:
    get:
      tags:
        - Articles
      summary: Get recent articles from users you follow
      description: Get most recent articles from users you follow. Use query parameters
        to limit. Auth is required
      operationId: GetArticlesFeed
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: limit
          in: query
          description: Limit number of articles returned (default is 20)
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Offset/skip number of articles (default is 0)
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
  /articles:
    get:
      tags:
        - Articles
      summary: Get recent articles globally
      description: Get most recent articles globally. Use query parameters to filter
        results. Auth is optional
      operationId: GetArticles
      parameters:
        #
        # 自前追加
        #
        - name: Authorization
          in: header
          description: セッション用JWT
          required: false
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: tag
          in: query
          description: Filter by tag
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author (username)
          schema:
            type: string
        - name: favorited
          in: query
          description: Filter by favorites of a user (username)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of articles returned (default is 20)
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Offset/skip number of articles (default is 0)
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
    post:
      tags:
        - Articles
      summary: Create an article
      description: Create an article. Auth is required
      operationId: CreateArticle
      # 自前追加
      parameters:
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
      requestBody:
        description: Article to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewArticleRequest'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: article
  /articles/{slug}:
    get:
      tags:
        - Articles
      summary: Get an article
      description: Get an article. Auth not required
      operationId: GetArticle
      parameters:
        #
        # 自前追加
        #
        - name: Authorization
          in: header
          description: セッション用JWT
          required: false
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article to get
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
    put:
      tags:
        - Articles
      summary: Update an article
      description: Update an article. Auth is required
      operationId: UpdateArticle
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article to update
          required: true
          schema:
            type: string
      requestBody:
        description: Article to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: article
    delete:
      tags:
        - Articles
      summary: Delete an article
      description: Delete an article. Auth is required
      operationId: DeleteArticle
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
  /articles/{slug}/comments:
    get:
      tags:
        - Comments
      summary: Get comments for an article
      description: Get the comments for an article. Auth is optional
      operationId: GetArticleComments
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: false
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article that you want to get comments for
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleCommentsResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
    post:
      tags:
        - Comments
      summary: Create a comment for an article
      description: Create a comment for an article. Auth is required
      operationId: CreateArticleComment
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article that you want to create a comment for
          required: true
          schema:
            type: string
      requestBody:
        description: Comment you want to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCommentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCommentResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: comment
  /articles/{slug}/comments/{id}:
    delete:
      tags:
        - Comments
      summary: Delete a comment for an article
      description: Delete a comment for an article. Auth is required
      operationId: DeleteArticleComment
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article that you want to delete a comment for
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the comment you want to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
  /articles/{slug}/favorite:
    post:
      tags:
        - Favorites
      summary: Favorite an article
      description: Favorite an article. Auth is required
      operationId: CreateArticleFavorite
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article that you want to favorite
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
    delete:
      tags:
        - Favorites
      summary: Unfavorite an article
      description: Unfavorite an article. Auth is required
      operationId: DeleteArticleFavorite
      parameters:
        # 自前追加
        - name: Authorization
          in: header
          description: セッション用JWT
          required: true
          schema:
            $ref: '#/components/securitySchemes/Token'
        - name: slug
          in: path
          description: Slug of the article that you want to unfavorite
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
  /tags:
    get:
      summary: Get tags
      description: Get tags. Auth not required
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'

#
# OpenAPI Object: components
#
# 型
# - Components Object
# 必須？
# - No
# URL
# - https://spec.openapis.org/oas/v3.0.1#openapi-object
# 概要
# - スキーマに関する共通化するための要素
# Components Objectの詳細
# - https://spec.openapis.org/oas/v3.0.1#components-object
#
components:

  #
  # Components Object: schemas
  #
  # 型
  # - Map[string, Schema Object or Reference Object]
  #   - Key
  #     - String
  #   - Value
  #     - Schema Object
  #     - or Reference Object
  # 必須？
  # - No
  # URL
  # - https://spec.openapis.org/oas/v3.0.1#openapi-object
  # 概要
  # - スキーマに関する共通化するための要素
  # Schema Objectの詳細
  # - https://spec.openapis.org/oas/v3.0.1#schema-object
  # Reference Objectの詳細
  # - https://spec.openapis.org/oas/v3.0.1#reference-object
  #
  schemas:

    #
    # Schema Object
    #
    # 入出力データ型の定義で利用
    # JSON Schemaの拡張サブセット
    # 基本はJSON Schema に準じる
    #
    LoginUser:

      #
      # (From JSON Schema Validation)
      # Schema Object: required
      #
      # 型
      # - [string]
      # 必須？
      # - No
      # URL
      # - https://json-schema.org/draft/2020-12/json-schema-validation.html#name-required
      #   - (ドラフト版-期限: 18 December 2022)
      # 概要
      # - 省略したら空配列
      # - 要素はユニークである必要がある
      #
      required:
        - email
        - password

      #
      # (JSON Schema ValidationのものをOpenAPI用にカスタマイズ)
      # Schema Object: type
      #
      # 型
      # - string
      #   - "null"
      #   - or "boolean"
      #   - or "object"
      #   - or "array" (複数の型はサポートしていない)
      #   - or "number"
      #   - or "string"
      # - 小数部が0である任意の数値であるinteger(OpenAPIではサポートなし)
      # 必須？
      # - Yes
      # URL
      # - https://json-schema.org/draft/2020-12/json-schema-validation.html#name-type
      #   - JSON Schema Validation
      #   - (ドラフト版-期限: 18 December 2022)
      # - https://spec.openapis.org/oas/v3.0.1#schema-object
      #   - OpenAPI
      # 概要
      # - インスタンスの型と一致してればOK
      #   - ほとんどのケースで "object" が選択されそう
      #
      type: object

      #
      # (From JSON Schema Core)
      # Schema Object: properties
      #
      # 型
      # - object
      # 必須？
      # - 謎(多分No)
      # URL
      # - https://json-schema.org/draft/2020-12/json-schema-core.html#section-10.3.2.1
      #   - JSON Schema Core
      #   - (ドラフト版-期限: 18 December 2022)
      # - https://spec.openapis.org/oas/v3.0.1#schema-object
      #   - OpenAPI
      # 概要
      # - プロパティ
      # - 有効なJSON Schemaである必要がある
      # - 省略すると、空のオブジェクト
      #
      properties:
        email:
          type: string
        password:
          type: string
          format: password

    LoginUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/LoginUser'
    NewUser:
      required:
        - email
        - password
        - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    NewUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/NewUser'
    User:
      required:
        - bio
        - email
        - image
        - token
        - username
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
    UserResponse:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    UpdateUser:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
    UpdateUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UpdateUser'
    ProfileResponse:
      required:
        - profile
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
    Profile:
      required:
        - bio
        - following
        - image
        - username
      type: object
      properties:
        username:
          type: string
        bio:
          type: string
        image:
          type: string
        following:
          type: boolean
    Article:
      required:
        - author
        - body
        - createdAt
        - description
        - favorited
        - favoritesCount
        - slug
        - tagList
        - title
        - updatedAt
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        favorited:
          type: boolean
        favoritesCount:
          type: integer
        author:
          $ref: '#/components/schemas/Profile'
    SingleArticleResponse:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
    MultipleArticlesResponse:
      required:
        - articles
        - articlesCount
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        articlesCount:
          type: integer
    NewArticle:
      required:
        - body
        - description
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
    NewArticleRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/NewArticle'
    UpdateArticle:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
    UpdateArticleRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
    Comment:
      required:
        - author
        - body
        - createdAt
        - id
        - updatedAt
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        body:
          type: string
        author:
          $ref: '#/components/schemas/Profile'
    SingleCommentResponse:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
    MultipleCommentsResponse:
      required:
        - comments
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    NewComment:
      required:
        - body
      type: object
      properties:
        body:
          type: string
    NewCommentRequest:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/NewComment'
    TagsResponse:
      required:
        - tags
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
    GenericErrorModel:
      required:
        - errors
      type: object
      properties:
        errors:
          required:
            - body
          type: object
          properties:
            body:
              type: array
              items:
                type: string
    #
    # 自前追加
    #
    # '#/components/securitySchemes/Token' をschemeに設定した時
    # Tokenモデルがないため、エラーになる
    # TokenはStringでいいので定義する
    #
    Token:
      type: string
  #
  # Components Object: securitySchemes
  #
  # 型
  # - Map[string, Security Scheme Object or Reference Object]
  #   - Key
  #     - String
  #   - Value
  #     - Security Scheme Object
  #     - or Reference Object
  # 必須？
  # - No
  # URL
  # - https://spec.openapis.org/oas/v3.0.1#openapi-object
  # 概要
  # - セキュリティスキーマに関する共通化するための要素
  # Schema Objectの詳細
  # - https://spec.openapis.org/oas/v3.0.1#schema-object
  # Reference Objectの詳細
  # - https://spec.openapis.org/oas/v3.0.1#reference-object
  #
  securitySchemes:

    #
    # Security Scheme Object
    #
    # 使用可能なセキュリティスキーム定義
    # - HTTP認証
    # - APIキー
    #   - ヘッダ
    #   - クエリパラメータ
    # - OAuth2
    #   - implicit
    #   - password
    #   - application
    #   - access code
    # - OIDC
    #
    Token:
      #
      # Security Scheme Object: type
      #
      # 型
      # - string
      #   - "apiKey"
      #   - "http"
      #   - "oauth2"
      #   - "openIdConnect"
      # 必須？
      # - Yes
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#security-scheme-object
      # 概要
      # - セキュリティスキームのタイプ
      #
      type: apiKey

      #
      # Security Scheme Object: description
      #
      # 型
      # - string
      # 必須？
      # - No
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#security-scheme-object
      # 概要
      # - セキュリティスキームの短い説明
      # - CommonMarkが使える
      #
      description: "For accessing the protected API resources, you must have received\
        \ a a valid JWT token after registering or logging in. This JWT token must\
        \ then be used for all protected resources by passing it in via the 'Authorization'\
        \ header.\n\nA JWT token is generated by the API by either registering via\
        \ /users or logging in via /users/login.\n\nThe following format must be in\
        \ the 'Authorization' header :\n\n    Token xxxxxx.yyyyyyy.zzzzzz\n    \n"

      #
      # Security Scheme Object: name
      #
      # 型
      # - string
      # 必須？
      # - yes(apiKeyの時に限り)
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#security-scheme-object
      # 概要
      # - apiKeyの時に適用される
      # - 利用するパラメータの名前
      # - 例: headerの時は "Authorization: *****.*****.*****" のAuthorizationがname
      #
      name: Authorization

      #
      # Security Scheme Object: in
      #
      # 型
      # - string
      #   - "query"
      #   - "header"
      #   - "cookie"
      # 必須？
      # - yes(apiKeyの時に限り)
      # URL
      # - https://spec.openapis.org/oas/v3.0.1#security-scheme-object
      # 概要
      # - apiKeyの時に適用される
      # - APIキーの保持場所(クエリパラメータ or ヘッダ or クッキー)
      #
      in: header
